@model List<UserDto>
@{
    Layout = "_MainLayout";
    var cUserID = ViewBag.userId;
}

<style>

    .chat-container {
        display: flex;
        justify-content: center;
        align-items: center;
        height: 100vh; /* Full height to center vertically */
        width: 100%;
    }

    .chat-wrapper {
        display: flex;
        width: 900px;
        max-width: 100%;
        height: 600px;
        background-color: white;
        border-radius: 10px;
        overflow: hidden;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
    }


        .chat-wrapper .chat-sidebar {
            width: 250px;
            background: #fff;
            border-right: 1px solid #ddd;
            padding: 20px;
            overflow-y: auto;
        }

    .chat-sidebar h2 {
        font-size: 18px;
        margin-bottom: 20px;
    }

    .chat-sidebar .user {
        padding: 10px;
        border-radius: 6px;
        margin-bottom: 10px;
        cursor: pointer;
        transition: 0.2s;
    }

        .chat-sidebar .user:hover {
            background: #f2f2f2;
        }

    .chat-area {
        flex: 1;
        display: flex;
        flex-direction: column;
        background-color: #e5ddd5;
    }

    .chat-header {
        padding: 15px 20px;
        background: #fff;
        border-bottom: 1px solid #ddd;
        font-weight: bold;
    }

    .chat-messages {
        flex: 1;
        padding: 20px;
        overflow-y: auto;
    }

    .message {
        padding: 10px;
        margin: 5px;
        border-radius: 8px;
        max-width: 60%;
    }

    .mine {
        background-color: #d1e7dd;
        align-self: flex-start;
        text-align: left;
        margin-right: auto;
    }

    .theirs {
        background-color: #f8d7da;
        align-self: flex-end;
        text-align: right;
        margin-left: auto;
    }

    #chatMessages {
        display: flex;
        flex-direction: column;
    }

    .chat-input {
        padding: 15px 20px;
        background: #fff;
        border-top: 1px solid #ddd;
        display: flex;
    }

    #messageInput {
        flex: 1;
        padding: 10px 15px;
        border: 1px solid #ccc;
        border-radius: 20px;
        outline: none;
    }

    #sendButton {
        margin-left: 10px;
        padding: 10px 20px;
        border: none;
        background: #007bff;
        color: white;
        border-radius: 20px;
    }
</style>

<div class="chat-container">
    <div class="chat-wrapper">
        <!-- Renamed from aside to div to avoid layout conflict -->
        <div class="chat-sidebar">
            <h2>Chats</h2>
            <ul id="userList">
                @foreach (var user in Model)
                {
                    <li class="user" data-userid="@user.Id">@user.UserName</li>
                }
            </ul>
        </div>

        <main class="chat-area">
            <div class="chat-header" id="chatHeader">Select a user</div>

            <div class="chat-messages" id="chatMessages">
                <!-- Messages will appear here -->
            </div>

            <div class="chat-input">
                <input type="text" id="messageInput" placeholder="Type your message..." />
                <button id="sendButton">Send</button>
            </div>
        </main>
    </div>
</div>

<script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/7.0.5/signalr.min.js" ></script>
<script>
    const currentUserId = "@cUserID";
    let selectedUserId = null;

    const connection = new signalR.HubConnectionBuilder().withUrl("/ChatHub").build();

    connection.on("MessageReceived", function (message) {
        const isMine = message.senderId === currentUserId;
        appendMessage(message, isMine);
    });

    connection.on("MessageSent", function (message) {
        appendMessage(message, true);
    });

    connection.on("ChatHistoryReceived", function (messages) {

        const chatBox = document.getElementById("chatMessages");
        chatBox.innerHTML = "";
        messages.forEach(msg => {
            const isMine = msg.senderId === currentUserId;
            appendMessage(msg, isMine);
        });
    });

    function appendMessage(msg, isMine) {
        const msgDiv = document.createElement("div");
        msgDiv.className = isMine ? "message mine" : "message theirs";
        msgDiv.innerText = msg.message;
        document.getElementById("chatMessages").appendChild(msgDiv);
    }

    document.getElementById("sendButton").addEventListener("click", async () => {
        const input = document.getElementById("messageInput");
        const text = input.value.trim();
        if (!text || selectedUserId === null) return;
        
        const messageDto = {
            senderId: currentUserId,
            receiverId: selectedUserId,
            message: text
        };

        await connection.invoke("SendMessageAsync", messageDto);
        input.value = "";
    });

    document.addEventListener("DOMContentLoaded", function () {
        document.getElementById("userList").addEventListener("click", function (e) {
            const li = e.target.closest(".user");
            if (!li) return;

            selectedUserId = li.dataset.userid;
            loadChatWith(selectedUserId);
            document.getElementById("chatHeader").innerText = "Chat with " + li.innerText;
        });
    });

    async function loadChatWith(userId) {
        await connection.invoke("LoadChatHistory", currentUserId, userId);
    }

    connection.start().then(() => console.log("Connected")).catch(err => console.error(err));
</script>
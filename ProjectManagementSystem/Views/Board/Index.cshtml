@model ProjectManagementSystem.Models.Board.ProjectBoardViewModel
<link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />
@Html.AntiForgeryToken()
@{
    Layout = "_MainLayout";
}
<script src="https://code.jquery.com/jquery-3.7.1.min.js" integrity="sha256-/JqT3SQfawRcv/BIHPThkBvs0OEvtFFmqPF/lYI/Cxo=" crossorigin="anonymous"></script>
<main class="content">
    <div class="projects-section">
        <div id="board-content">
            <partial name="Board" model="Model"/>
        </div>
    </div>
</main>

<!-- Task Detail Modal -->
<div class="modal fade" id="taskDetailModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="taskDetailModalTitle">Görev Detayları</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="row">
                    <div class="col-md-8">
                        <h6>Açıklama</h6>
                        <p id="taskDetailDescription">Yükleniyor...</p>

                        <h6 class="mt-4">Subtasklar</h6>
                        <ul class="list-group" id="taskSubtasksList">
                            <li class="list-group-item d-flex justify-content-between align-items-center">
                                <div class="form-check">
                                    <input class="form-check-input" type="checkbox" id="subtask1">
                                    <label class="form-check-label" for="subtask1">Subtask örneği</label>
                                </div>
                                <button class="btn btn-sm btn-link text-danger">
                                    <i class="bi bi-trash"></i>
                                </button>
                            </li>
                        </ul>
                        <button class="btn btn-sm btn-outline-primary mt-2" id="addSubtaskBtn">
                            <i class="bi bi-plus"></i> Subtask Ekle
                        </button>
                    </div>
                    <div class="col-md-4">
                        <div class="card">
                            <div class="card-body">
                                <h6 class="card-title">Detaylar</h6>

                                <div class="mb-3">
                                    <label class="form-label">Durum</label>
                                    <select class="form-select" id="taskStatusSelect">
                                        <option value="1">Yapılacak</option>
                                        <option value="2">Devam Ediyor</option>
                                        <option value="3">Test Ediliyor</option>
                                        <option value="4">Tamamlandı</option>
                                    </select>
                                </div>

                                <div class="mb-3">
                                    <label class="form-label">Öncelik</label>
                                    <select class="form-select" id="taskPrioritySelect">
                                        <option value="1">Yüksek</option>
                                        <option value="2">Orta</option>
                                        <option value="3">Düşük</option>
                                    </select>
                                </div>

                                <div class="mb-3">
                                    <label class="form-label">Atananlar</label>
                                    <div id="taskAssigneesList">
                                        <div class="d-flex align-items-center mb-2">
                                            <img src="https://randomuser.me/api/portraits/men/32.jpg" class="avatar me-2">
                                            <span>John Doe</span>
                                        </div>
                                    </div>
                                    <button class="btn btn-sm btn-outline-secondary w-100 mt-2">
                                        <i class="bi bi-plus"></i> Atanan Ekle
                                    </button>
                                </div>

                                <div class="mb-3">
                                    <label class="form-label">Son Tarih</label>
                                    <input type="date" class="form-control" id="taskDueDate">
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Kapat</button>
                <button type="button" class="btn btn-primary">Değişiklikleri Kaydet</button>
            </div>
        </div>
    </div>
</div>

<!-- Add Subtask Modal -->
<div class="modal fade" id="addSubtaskModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Subtask Ekle</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <input type="hidden" id="parentTaskId">
                <div class="mb-3">
                    <label class="form-label">Başlık</label>
                    <input type="text" class="form-control" id="subtaskTitle" placeholder="Subtask başlığı">
                </div>
                <div class="mb-3">
                    <label class="form-label">Açıklama</label>
                    <textarea class="form-control" id="subtaskDescription" rows="3"></textarea>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">İptal</button>
                <button type="button" class="btn btn-primary" onclick="addSubtask()">Ekle</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // Drag and Drop Functionality
        document.addEventListener('DOMContentLoaded', function() {
            doDragOperations()
        });

        function doDragOperations(){
            const columns = document.querySelectorAll('.column-body');

            columns.forEach(column => {
                column.addEventListener('dragover', e => {
                    e.preventDefault();
                    const draggingTask = document.querySelector('.dragging');
                    const afterElement = getDragAfterElement(column, e.clientY);

                    if (afterElement == null) {
                        column.appendChild(draggingTask);
                    } else {
                        column.insertBefore(draggingTask, afterElement);
                    }
                });
            });

            const tasks = document.querySelectorAll('.task-card');
            tasks.forEach(task => {
                task.addEventListener('dragstart', () => {
                    task.classList.add('dragging');
                });

                task.addEventListener('dragend', async () => {
                    task.classList.remove('dragging');

                    const taskId = task.dataset.taskId;
                    const newColumnId = task.closest('.board-column').dataset.columnId;

                    // Update task status on server
                    try {
                        const response = await fetch(`/Board/UpdateTaskStatus?taskId=${taskId}&statusId=${newColumnId}`, {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                                '__RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
                            }
                        });

                        if (!response.ok) {
                            throw new Error('Status update failed');
                        }
                    } catch (error) {
                        console.error('Error:', error);
                        // Revert UI if update fails
                        // You might want to implement a more sophisticated rollback
                    }
                });
            });
        }

        function getDragAfterElement(column, y) {
            const draggableElements = [...column.querySelectorAll('.task-card:not(.dragging)')];

            return draggableElements.reduce((closest, child) => {
                const box = child.getBoundingClientRect();
                const offset = y - box.top - box.height / 2;

                if (offset < 0 && offset > closest.offset) {
                    return { offset: offset, element: child };
                } else {
                    return closest;
                }
            }, { offset: Number.NEGATIVE_INFINITY }).element;
        }

        // Modal Functions
        function showTaskDetailModal(taskId) {
            // Fetch task details from server
            fetch(`/Tasks/Details/${taskId}`)
                .then(response => response.json())
                .then(task => {
                    document.getElementById('taskDetailModalTitle').textContent = task.title;
                    document.getElementById('taskDetailDescription').textContent = task.description;
                    document.getElementById('taskStatusSelect').value = task.statusId;
                    document.getElementById('taskPrioritySelect').value = task.priority;

                    // Populate subtasks
                    const subtasksList = document.getElementById('taskSubtasksList');
                    subtasksList.innerHTML = '';

                    task.subtasks.forEach(subtask => {
                        const subtaskItem = document.createElement('li');
                        subtaskItem.className = 'list-group-item d-flex justify-content-between align-items-center';
                        subtaskItem.innerHTML = `
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" id="subtask-${subtask.id}"
                                    ${subtask.isCompleted ? 'checked' : ''}
                                    onchange="toggleSubtaskCompletion('${subtask.id}', this.checked)">
                                <label class="form-check-label" for="subtask-${subtask.id}">${subtask.title}</label>
                            </div>
                            <button class="btn btn-sm btn-link text-danger" onclick="deleteSubtask('${subtask.id}')">
                                <i class="bi bi-trash"></i>
                            </button>
                        `;
                        subtasksList.appendChild(subtaskItem);
                    });

                    const modal = new bootstrap.Modal(document.getElementById('taskDetailModal'));
                    modal.show();
                })
                .catch(error => {
                    console.error('Error:', error);
                    alert('Görev detayları yüklenirken bir hata oluştu.');
                });
        }

        function showAddSubtaskModal(taskId, taskTitle) {
            document.getElementById('parentTaskId').value = taskId;
            document.querySelector('#addSubtaskModal .modal-title').textContent = `"${taskTitle}" için Subtask Ekle`;

            // Clear previous inputs
            document.getElementById('subtaskTitle').value = '';
            document.getElementById('subtaskDescription').value = '';

            const modal = new bootstrap.Modal(document.getElementById('addSubtaskModal'));
            modal.show();
        }

        function addSubtask() {
            const taskId = document.getElementById('parentTaskId').value;
            const title = document.getElementById('subtaskTitle').value;
            const description = document.getElementById('subtaskDescription').value;

            if (!title.trim()) {
                alert('Subtask başlığı boş olamaz!');
                return;
            }

            // Send to server
            fetch('/Tasks/AddSubtask', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
                },
                body: JSON.stringify({
                    taskId: taskId,
                    title: title,
                    description: description
                })
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error('Subtask eklenemedi');
                }
                return response.json();
            })
            .then(data => {
                // Add to UI
                const subtaskItem = document.createElement('li');
                subtaskItem.className = 'list-group-item d-flex justify-content-between align-items-center';
                subtaskItem.innerHTML = `
                    <div class="form-check">
                        <input class="form-check-input" type="checkbox" id="subtask-${data.id}">
                        <label class="form-check-label" for="subtask-${data.id}">${data.title}</label>
                    </div>
                    <button class="btn btn-sm btn-link text-danger" onclick="deleteSubtask('${data.id}')">
                        <i class="bi bi-trash"></i>
                    </button>
                `;
                document.getElementById('taskSubtasksList').appendChild(subtaskItem);

                // Close modal
                bootstrap.Modal.getInstance(document.getElementById('addSubtaskModal')).hide();
            })
            .catch(error => {
                console.error('Error:', error);
                alert('Subtask eklenirken bir hata oluştu.');
            });
        }

        function toggleSubtaskCompletion(subtaskId, isCompleted) {
            fetch(`/Tasks/ToggleSubtask/${subtaskId}?isCompleted=${isCompleted}`, {
                method: 'POST',
                headers: {
                    'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
                }
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error('Subtask durumu güncellenemedi');
                }
                // You might want to update the progress bar here
            })
            .catch(error => {
                console.error('Error:', error);
                alert('Subtask durumu güncellenirken bir hata oluştu.');
            });
        }

        function deleteSubtask(subtaskId) {
            if (!confirm('Bu subtaskı silmek istediğinize emin misiniz?')) {
                return;
            }

            fetch(`/Tasks/DeleteSubtask/${subtaskId}`, {
                method: 'POST',
                headers: {
                    'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
                }
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error('Subtask silinemedi');
                }
                // Remove from UI
                document.querySelector(`#taskSubtasksList li input[id="subtask-${subtaskId}"]`).closest('li').remove();
            })
            .catch(error => {
                console.error('Error:', error);
                alert('Subtask silinirken bir hata oluştu.');
            });
        }
    </script>
}